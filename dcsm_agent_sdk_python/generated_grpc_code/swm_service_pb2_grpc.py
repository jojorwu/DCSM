# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import kem_pb2 as kem__pb2
import swm_service_pb2 as swm__service__pb2

GRPC_GENERATED_VERSION = '1.73.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in swm_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SharedWorkingMemoryStub(object):
    """Сервис для Общей Рабочей Памяти / Шины Памяти (Shared Working Memory / Memory Bus Service)
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PublishKEM = channel.unary_unary(
                '/dcsm.SharedWorkingMemory/PublishKEM',
                request_serializer=swm__service__pb2.PublishKEMRequest.SerializeToString,
                response_deserializer=swm__service__pb2.PublishKEMResponse.FromString,
                _registered_method=True)
        self.SubscribeKEMs = channel.unary_stream(
                '/dcsm.SharedWorkingMemory/SubscribeKEMs',
                request_serializer=swm__service__pb2.SubscribeKEMsRequest.SerializeToString,
                response_deserializer=kem__pb2.KEM.FromString,
                _registered_method=True)
        self.QueryActiveKEMs = channel.unary_unary(
                '/dcsm.SharedWorkingMemory/QueryActiveKEMs',
                request_serializer=swm__service__pb2.QueryActiveKEMsRequest.SerializeToString,
                response_deserializer=swm__service__pb2.QueryActiveKEMsResponse.FromString,
                _registered_method=True)
        self.RequestKEMLoadToSWM = channel.unary_unary(
                '/dcsm.SharedWorkingMemory/RequestKEMLoadToSWM',
                request_serializer=swm__service__pb2.RequestKEMLoadToSWMRequest.SerializeToString,
                response_deserializer=swm__service__pb2.RequestKEMLoadToSWMResponse.FromString,
                _registered_method=True)


class SharedWorkingMemoryServicer(object):
    """Сервис для Общей Рабочей Памяти / Шины Памяти (Shared Working Memory / Memory Bus Service)
    """

    def PublishKEM(self, request, context):
        """Публикует КЕП в SWM, делая ее доступной для других агентов.
        Может также инициировать асинхронное сохранение в GLM, если КЕП новая или значительно обновлена.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeKEMs(self, request, context):
        """Подписывается на поток КЕП, соответствующих определенным критериям (например, тема, запрос).
        Сервер будет стримить КЕП по мере их появления или обновления в SWM.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryActiveKEMs(self, request, context):
        """Запрашивает активные КЕП из SWM на основе различных критериев.
        Это запрос "одного момента времени" к текущему состоянию SWM.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestKEMLoadToSWM(self, request, context):
        """Запрашивает "подтягивание" КЕП из GLM в SWM, если они там еще не активны.
        Может использоваться агентом, если он ожидает, что определенные КЕП скоро понадобятся.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SharedWorkingMemoryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PublishKEM': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishKEM,
                    request_deserializer=swm__service__pb2.PublishKEMRequest.FromString,
                    response_serializer=swm__service__pb2.PublishKEMResponse.SerializeToString,
            ),
            'SubscribeKEMs': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeKEMs,
                    request_deserializer=swm__service__pb2.SubscribeKEMsRequest.FromString,
                    response_serializer=kem__pb2.KEM.SerializeToString,
            ),
            'QueryActiveKEMs': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryActiveKEMs,
                    request_deserializer=swm__service__pb2.QueryActiveKEMsRequest.FromString,
                    response_serializer=swm__service__pb2.QueryActiveKEMsResponse.SerializeToString,
            ),
            'RequestKEMLoadToSWM': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestKEMLoadToSWM,
                    request_deserializer=swm__service__pb2.RequestKEMLoadToSWMRequest.FromString,
                    response_serializer=swm__service__pb2.RequestKEMLoadToSWMResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dcsm.SharedWorkingMemory', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('dcsm.SharedWorkingMemory', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SharedWorkingMemory(object):
    """Сервис для Общей Рабочей Памяти / Шины Памяти (Shared Working Memory / Memory Bus Service)
    """

    @staticmethod
    def PublishKEM(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dcsm.SharedWorkingMemory/PublishKEM',
            swm__service__pb2.PublishKEMRequest.SerializeToString,
            swm__service__pb2.PublishKEMResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeKEMs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/dcsm.SharedWorkingMemory/SubscribeKEMs',
            swm__service__pb2.SubscribeKEMsRequest.SerializeToString,
            kem__pb2.KEM.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QueryActiveKEMs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dcsm.SharedWorkingMemory/QueryActiveKEMs',
            swm__service__pb2.QueryActiveKEMsRequest.SerializeToString,
            swm__service__pb2.QueryActiveKEMsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RequestKEMLoadToSWM(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dcsm.SharedWorkingMemory/RequestKEMLoadToSWM',
            swm__service__pb2.RequestKEMLoadToSWMRequest.SerializeToString,
            swm__service__pb2.RequestKEMLoadToSWMResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
