# Central Configuration for DCSM Services

# Shared settings - these can be overridden by service-specific settings below,
# or by environment variables.
shared:
  LOG_LEVEL: "INFO" # Default log level for all services unless overridden
  RETRY_MAX_ATTEMPTS: 3
  RETRY_INITIAL_DELAY_S: 1.0
  RETRY_BACKOFF_FACTOR: 2.0
  RETRY_JITTER_FRACTION: 0.1
  GRPC_SERVER_MAX_WORKERS: 10 # Default for sync gRPC servers (GLM, KPS)
  GRPC_SERVER_SHUTDOWN_GRACE_S: 5 # Default shutdown grace period in seconds

  # gRPC Keepalive and Channel/Server Options (applied to clients and servers where applicable)
  GRPC_KEEPALIVE_TIME_MS: 60000                    # e.g., 1 minute
  GRPC_KEEPALIVE_TIMEOUT_MS: 10000                 # e.g., 10 seconds
  GRPC_KEEPALIVE_PERMIT_WITHOUT_CALLS: true      # true or false
  GRPC_HTTP2_MIN_PING_INTERVAL_WITHOUT_DATA_MS: 30000 # e.g., 30 seconds (client-side)
  GRPC_MAX_RECEIVE_MESSAGE_LENGTH: 4194304         # 4MB (4 * 1024 * 1024)
  GRPC_MAX_SEND_MESSAGE_LENGTH: 4194304            # 4MB
  GRPC_SERVER_MAX_CONNECTION_IDLE_MS: 0            # 0 for infinite (server-side)
  GRPC_SERVER_MAX_CONNECTION_AGE_MS: 0             # 0 for infinite (server-side)
  GRPC_SERVER_MAX_CONNECTION_AGE_GRACE_MS: 0       # 0 for infinite (server-side)

  # gRPC Client Load Balancing (set GRPC_DNS_RESOLVER=ares in client service env for best results with dns)
  GRPC_CLIENT_LB_POLICY: "round_robin" # e.g., "round_robin", "pick_first", or null to use gRPC default

  # Circuit Breaker Configuration (for client calls)
  CIRCUIT_BREAKER_ENABLED: true               # true or false
  CIRCUIT_BREAKER_FAIL_MAX: 5                 # Max failures before opening
  CIRCUIT_BREAKER_RESET_TIMEOUT_S: 30         # Seconds before attempting half-open state

  # Advanced Logging Configuration
  LOG_FORMAT: "%(asctime)s - %(name)s - %(levelname)-8s - %(message)s" # Default: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  LOG_DATE_FORMAT: "%Y-%m-%d %H:%M:%S,%03d" # Default
  LOG_OUTPUT_MODE: "stdout" # Options: "stdout", "file", "json_stdout", "json_file"
  LOG_FILE_PATH: null # Example: "/var/log/dcsm/dcsm_service.log" (used if mode is 'file' or 'json_file')

  # TLS Configuration (Paths are examples, adjust for your deployment)
  # These are paths *within the container* if using Docker, assuming certs are mounted to /certs
  # For server-side TLS (each service exposing its endpoint securely):
  # GRPC_SERVER_CERT_PATH: null # Example: "/certs/service_name/server.crt"
  # GRPC_SERVER_KEY_PATH: null  # Example: "/certs/service_name/server.key"
  # For client-side TLS (services acting as clients to other secure services):
  # GRPC_CLIENT_ROOT_CA_CERT_PATH: null # Example: "/certs/ca/ca.crt" # Path to CA cert to verify servers
  # For mTLS (client also presents a certificate - not implemented in this step):
  # GRPC_CLIENT_CERT_PATH: null # Example: "/certs/client_name/client.crt"
  # GRPC_CLIENT_KEY_PATH: null  # Example: "/certs/client_name/client.key"

glm:
  # Inherits LOG_LEVEL, RETRY_*, GRPC_SERVER_*, GRPC_KEEPALIVE_*, LOG_*, GRPC_CLIENT_LB_POLICY,
  # and TLS paths from shared. Override here if specific paths are needed for GLM.
  # Example for enabling TLS for GLM server:
  # GRPC_SERVER_CERT_PATH: "/certs/glm/server.crt"
  # GRPC_SERVER_KEY_PATH: "/certs/glm/server.key"
  # If GLM were a client to another service and needed to verify that service's CA:
  # GRPC_CLIENT_ROOT_CA_CERT_PATH: "/certs/ca/ca.crt"

  glm_storage_backend_type: "default_sqlite_qdrant" # Active backend: "default_sqlite_qdrant" or "in_memory"
  glm_storage_backends_configs:
    default_sqlite_qdrant:
      # For this backend, primary settings like DB_FILENAME, QDRANT_HOST, etc.,
      # are still sourced from the top-level GLMConfig fields for backward compatibility
      # and ease of simple setup. This section can hold additional, specific overrides
      # or settings unique to this composed backend if ever needed.
      # Example: specific_option_for_default: "value"
      description: "Default backend using SQLite for metadata and Qdrant for vectors."
    in_memory:
      # Example configuration for a hypothetical in-memory backend
      max_kems: 10000
      log_stats_interval_s: 60
      description: "In-memory backend for testing/development. Data is not persisted."

  DB_FILENAME: "glm_prod_metadata.sqlite3" # Used by 'default_sqlite_qdrant' backend
  QDRANT_HOST: "dcsm_qdrant" # Used by 'default_sqlite_qdrant' backend
  QDRANT_PORT: 6333
  QDRANT_COLLECTION: "glm_kems_production_v1"
  DEFAULT_VECTOR_SIZE: 384
  DEFAULT_PAGE_SIZE: 20
  GRPC_LISTEN_ADDRESS: "[::]:50051"
  SQLITE_BUSY_TIMEOUT: 7500
  SQLITE_CONNECT_TIMEOUT_S: 10
  QDRANT_CLIENT_TIMEOUT_S: 10
  QDRANT_DEFAULT_DISTANCE_METRIC: "COSINE" # COSINE, DOT, or EUCLID
  QDRANT_PREFLIGHT_CHECK_TIMEOUT_S: 2
  # Example: Override GRPC_SERVER_MAX_WORKERS for GLM if needed
  # GRPC_SERVER_MAX_WORKERS: 15
  HEALTH_CHECK_SQLITE_QUERY: "SELECT 1"
  HEALTH_CHECK_QDRANT_TIMEOUT_S: 2.0

kps:
  # Inherits LOG_LEVEL, RETRY_*, GRPC_SERVER_*, GRPC_KEEPALIVE_*, LOG_*, GRPC_CLIENT_LB_POLICY,
  # and TLS paths from shared. Override here if specific paths are needed for KPS.
  # Example for enabling TLS for KPS server:
  # GRPC_SERVER_CERT_PATH: "/certs/kps/server.crt"
  # GRPC_SERVER_KEY_PATH: "/certs/kps/server.key"
  # KPS is a client to GLM. To verify GLM's server cert (if GLM TLS is enabled):
  # GRPC_CLIENT_ROOT_CA_CERT_PATH: "/certs/ca/ca.crt"

  GLM_SERVICE_ADDRESS: "dns:///dcsm_glm:50051" # Example for enabling client-side LB if dcsm_glm is scaled
  EMBEDDING_MODEL_NAME: "sentence-transformers/all-MiniLM-L6-v2"
  DEFAULT_VECTOR_SIZE: 384
  DEFAULT_PROCESSING_BATCH_SIZE: 32
  GRPC_LISTEN_ADDRESS: "[::]:50052"
  GLM_STORE_KEM_TIMEOUT_S: 15 # Timeout for KPS calling GLM StoreKEM

  # KPS Idempotency Settings
  KPS_IDEMPOTENCY_CHECK_ENABLED: true # true or false
  KPS_IDEMPOTENCY_METADATA_KEY: "source_data_id" # Metadata key for storing/checking data_id
  KPS_GLM_IDEMPOTENCY_CHECK_TIMEOUT_S: 5.0 # Timeout for the GLM query during idempotency check
  HEALTH_CHECK_GLM_TIMEOUT_S: 2.0

swm:
  # Inherits LOG_LEVEL, RETRY_*, GRPC_SERVER_SHUTDOWN_GRACE_S, GRPC_KEEPALIVE_*, LOG_*, GRPC_CLIENT_LB_POLICY,
  # and TLS paths from shared. Override here if specific paths are needed for SWM.
  # GRPC_SERVER_MAX_WORKERS from shared is not applicable to SWM's async server
  # Example for enabling TLS for SWM server:
  # GRPC_SERVER_CERT_PATH: "/certs/swm/server.crt"
  # GRPC_SERVER_KEY_PATH: "/certs/swm/server.key"
  # SWM is a client to GLM. To verify GLM's server cert (if GLM TLS is enabled):
  # GRPC_CLIENT_ROOT_CA_CERT_PATH: "/certs/ca/ca.crt"

  GLM_SERVICE_ADDRESS: "dns:///dcsm_glm:50051" # Example for enabling client-side LB if dcsm_glm is scaled
  MAX_CACHE_SIZE_KEMS: 1000 # Conceptual for Redis, actual eviction by Redis policies
  DEFAULT_KEM_TTL_SECONDS: 3600
  GRPC_LISTEN_ADDRESS: "[::]:50053"

  REDIS_HOST: "dcsm_swm_redis"
  REDIS_PORT: 6379
  SWM_REDIS_PASSWORD: null # Set password if Redis requires it, e.g., "yourpassword"
  SWM_REDIS_DB: 0
  REDIS_DB_PUBSUB: 0
  REDIS_DB_CACHE_INDEX: 1
  REDIS_DB_LOCKS_COUNTERS: 2

  GLM_RETRIEVE_TIMEOUT_S: 20
  GLM_STORE_TIMEOUT_S: 10
  GLM_BATCH_STORE_TIMEOUT_S: 30

  GLM_PERSISTENCE_QUEUE_MAX_SIZE: 1000
  GLM_PERSISTENCE_FLUSH_INTERVAL_S: 5.0
  GLM_PERSISTENCE_BATCH_SIZE: 50
  GLM_PERSISTENCE_BATCH_MAX_RETRIES: 3
  GLM_PERSISTENCE_WORKER_SHUTDOWN_GRACE_S: 5

  REDIS_PUBSUB_GET_MESSAGE_TIMEOUT_S: 1.0
  REDIS_PUBSUB_ERROR_SLEEP_S: 1.0
  REDIS_MAX_PUBSUB_RETRIES: 5
  REDIS_RECONNECT_DELAY_S: 5.0

  SUBSCRIBER_MIN_QUEUE_SIZE: 10
  SUBSCRIBER_DEFAULT_QUEUE_SIZE: 100
  SUBSCRIBER_MAX_QUEUE_SIZE: 1000
  SUBSCRIBER_IDLE_CHECK_INTERVAL_S: 5.0
  SUBSCRIBER_IDLE_TIMEOUT_THRESHOLD: 6

  LOCK_CLEANUP_INTERVAL_S: 60
  LOCK_CLEANUP_SHUTDOWN_GRACE_S: 2

  REDIS_TRANSACTION_MAX_RETRIES: 3
  REDIS_TRANSACTION_RETRY_INITIAL_DELAY_S: 0.01
  REDIS_TRANSACTION_RETRY_BACKOFF_FACTOR: 2.0

  SWM_INDEXED_METADATA_KEYS: ["type", "source_system", "project_id"]

  SWM_EVICTION_SOURCE_AGENT_ID: "SWM_REDIS_EVICTION"
  REDIS_KEM_KEY_PREFIX: "swm_kem:"
  REDIS_INDEX_META_KEY_PREFIX: "swm_idx:meta:"
  REDIS_INDEX_DATE_CREATED_KEY: "swm_idx:date:created_at"
  REDIS_INDEX_DATE_UPDATED_KEY: "swm_idx:date:updated_at"
  REDIS_QUERY_TEMP_KEY_PREFIX: "swm_query_tmp:"

  # SWM specific GLM client retry settings (overrides shared RETRY_*)
  RETRY_MAX_ATTEMPTS: 4
  RETRY_INITIAL_DELAY_S: 0.8
  RETRY_BACKOFF_FACTOR: 1.5

  # GLM Persistence DLQ Settings
  GLM_PERSISTENCE_DLQ_ENABLED: true # true or false
  REDIS_DLQ_KEY: "dcsm:swm:glm_dlq" # Redis key for the DLQ list
  DLQ_MAX_SIZE: 1000 # Max items in DLQ, 0 for unlimited

  # SWM Distributed Primitives (Redis-backed)
  REDIS_LOCK_KEY_PREFIX: "dcsm:lock:"
  REDIS_LOCK_DEFAULT_LEASE_MS: 30000 # Default lease for locks if not specified by caller (30 seconds)
  REDIS_LOCK_ACQUIRE_POLL_INTERVAL_S: 0.1 # Poll interval when waiting to acquire a lock (100ms)
  REDIS_COUNTER_KEY_PREFIX: "dcsm:counter:"
```
