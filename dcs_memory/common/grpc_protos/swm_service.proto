syntax = "proto3";

package dcsm;

import "kem.proto";
import "glm_service.proto"; // For KEMQuery, if reused
import "google/protobuf/timestamp.proto";

option go_package = "github.com/your_org/dcsm_protos/gen/go/swm;swm_service_pb"; // Example Go package option

// Shared Working Memory Service (SWM)
service SharedWorkingMemoryService {
  // Publishes a KEM to SWM. May also initiate persistence/update in GLM.
  rpc PublishKEMToSWM(PublishKEMToSWMRequest) returns (PublishKEMToSWMResponse);

  // Subscribes to events occurring in SWM (e.g., new KEMs appearing).
  rpc SubscribeToSWMEvents(SubscribeToSWMEventsRequest) returns (stream SWMMemoryEvent);

  // Queries active KEMs directly from SWM (from its cache).
  rpc QuerySWM(QuerySWMRequest) returns (QuerySWMResponse);

  // Requests loading of KEMs from GLM into SWM (into SWM's cache).
  rpc LoadKEMsFromGLM(LoadKEMsFromGLMRequest) returns (LoadKEMsFromGLMResponse);

  // --- RPCs for Distributed Lock Management ---
  // Attempts to acquire a lock on a resource.
  rpc AcquireLock(AcquireLockRequest) returns (AcquireLockResponse);
  // Releases a previously acquired lock.
  rpc ReleaseLock(ReleaseLockRequest) returns (ReleaseLockResponse);
  // Gets information about the current lock status for a resource.
  rpc GetLockInfo(GetLockInfoRequest) returns (LockInfo);

  // --- RPCs for Distributed Counters ---
  // Atomically increments (or decrements) the value of a counter.
  // If the counter does not exist, it is created with the value of increment_by.
  rpc IncrementCounter(IncrementCounterRequest) returns (CounterValueResponse);
  // Gets the current value of a counter.
  // If the counter does not exist, may return an error or a default value (e.g., 0).
  rpc GetCounter(DistributedCounterRequest) returns (CounterValueResponse);
  // TODO: Add DeleteCounter(DistributedCounterRequest) returns (google.protobuf.Empty) in the future.
}

// --- Messages for PublishKEMToSWM ---
message PublishKEMToSWMRequest {
  KEM kem_to_publish = 1;
  bool persist_to_glm_if_new_or_updated = 2; // If true, SWM will attempt to save/update the KEM in GLM.
}

message PublishKEMToSWMResponse {
  string kem_id = 1; // ID of the published KEM (could be GLM-generated if persist_to_glm=true and ID was initially empty).
  bool published_to_swm = 2; // Whether successfully published to SWM's cache.
  bool persistence_triggered_to_glm = 3; // Whether a call to GLM was initiated.
  string status_message = 4; // Additional status message.
}

// --- Messages for SubscribeToSWMEvents ---
message SubscriptionTopic {
  enum TopicType {
    UNDEFINED_TOPIC = 0;
    KEM_LIFECYCLE_EVENTS = 1;     // All KEM updates (creation, update, deletion/eviction from SWM).
    // SYSTEM_EVENTS = 2;   // General SWM system events (not currently used).
  }
  TopicType type = 1;
  string filter_criteria = 2; // Filter criteria for the topic (e.g., "metadata.topic='project_x'" or "kem_id='id123'").
                              // The format of criteria needs to be defined (e.g., simple DSL or JSONPath).
                              // For KEM_LIFECYCLE_EVENTS, this could be a filter by ID, content type, metadata.
}

message SubscribeToSWMEventsRequest {
  string agent_id = 1; // Identifier of the subscribing agent (for logging and subscription management).
  repeated SubscriptionTopic topics = 2; // List of topics the agent subscribes to.
  int32 requested_queue_size = 3; // Optional: Client's requested size for its event queue. Server may apply bounds. Default 0 means server default.
}

message SWMMemoryEvent {
  enum EventType {
    EVENT_TYPE_UNSPECIFIED = 0; // Use UNSPECIFIED as the default value per convention.
    KEM_PUBLISHED = 1; // New KEM published in SWM (from another agent or loaded from GLM).
    KEM_UPDATED = 2;   // Existing KEM in SWM was updated (e.g., via PublishKEMToSWM with the same ID).
    KEM_EVICTED = 3; // KEM was evicted from SWM's cache.
    // KEM_ACCESSED = 4; // Optional: KEM access event (might generate too many events).
  }
  string event_id = 1; // Unique event ID.
  EventType event_type = 2;
  KEM kem_payload = 3;        // KEM related to the event.
                               // For KEM_EVICTED, may only contain kem_id.
  google.protobuf.Timestamp event_time = 4; // Server time of the event in SWM.
  string source_agent_id = 5; // Optional: ID of the agent that initiated the event (e.g., on Publish).
  string details = 6;   // Additional details about the event in text format.
}

// --- Messages for QuerySWM ---
message QuerySWMRequest {
  // Using KEMQuery from GLM as it already contains many useful query fields.
  // SWM will attempt to execute this query on its internal cache.
  // Not all KEMQuery fields may be efficiently supported at the SWM cache level.
  dcsm.KEMQuery query = 1; // Explicitly specify dcsm package for KEMQuery from glm_service.proto.
  int32 page_size = 2;
  string page_token = 3; // Can be a simple offset or a more complex token.
}

message QuerySWMResponse {
  repeated KEM kems = 1;
  string next_page_token = 2;
}

// --- Messages for LoadKEMsFromGLM ---
message LoadKEMsFromGLMRequest {
  // Using KEMQuery to specify to GLM which KEMs to retrieve and load into SWM.
  dcsm.KEMQuery query_for_glm = 1;
  // int32 limit_override = 2; // Can be controlled via query_for_glm.page_size or here.
  // bool load_embeddings_if_missing = 3; // Option for SWM to fetch embeddings from GLM if missing.
}

message LoadKEMsFromGLMResponse {
  int32 kems_queried_in_glm_count = 1; // How many KEMs were requested from GLM (may differ from actually loaded due to errors or duplicates).
  int32 kems_loaded_to_swm_count = 2;    // Number of KEMs actually added/updated in SWM's cache.
  repeated string loaded_kem_ids = 3; // List of KEM IDs that were loaded/updated in SWM.
  string status_message = 4;
}

// ----- Messages and RPCs for Distributed Lock Management -----

message AcquireLockRequest {
  string resource_id = 1; // Identifier of the resource for which the lock is requested.
  string agent_id = 2;    // Identifier of the agent requesting the lock.
  int32 timeout_ms = 3;   // Maximum time to wait for the lock in milliseconds (0 - don't wait, -1 - wait indefinitely).
  int32 lease_duration_ms = 4; // Requested lock lease duration in ms (0 - until explicitly released or connection loss).
                               // SWM may enforce its own min/max lease time.
}

enum LockStatusValue {
  LOCK_STATUS_UNSPECIFIED = 0;
  ACQUIRED = 1;         // Lock successfully acquired.
  ALREADY_HELD_BY_YOU = 2; // Lock is already held by this agent_id.
  TIMEOUT = 3;          // Wait time expired, lock not acquired.
  NOT_AVAILABLE = 4;    // Lock held by another agent (if timeout_ms = 0).
  ERROR = 5;            // An error occurred on the server.
}

message AcquireLockResponse {
  string resource_id = 1;
  string agent_id = 2;
  LockStatusValue status = 3;
  string lock_id = 4;         // Unique ID for the lock if acquired (can be useful for ReleaseLock).
  int64 acquired_at_unix_ms = 5; // Time lock was acquired (ms since UTC epoch).
  int64 lease_expires_at_unix_ms = 6; // Lease expiration time (ms since UTC epoch), if applicable.
  string message = 7;         // Additional message.
}

message ReleaseLockRequest {
  string resource_id = 1;
  string agent_id = 2;    // Agent attempting to release the lock.
  string lock_id = 3;     // Optional: Lock ID received from AcquireLock (for verification).
}

enum ReleaseStatusValue {
  RELEASE_STATUS_UNSPECIFIED = 0;
  RELEASED = 1;         // Lock successfully released.
  NOT_HELD = 2;         // Lock was not held by this agent or for this resource.
  INVALID_LOCK_ID = 3;  // Provided lock_id does not match the active lock.
  ERROR_RELEASING = 4;  // Server error during release.
}

message ReleaseLockResponse {
  string resource_id = 1;
  ReleaseStatusValue status = 2;
  string message = 3;
}

message GetLockInfoRequest {
  string resource_id = 1;
}

message LockInfo {
  string resource_id = 1;
  bool is_locked = 2;
  string current_holder_agent_id = 3; // Если is_locked = true
  string lock_id = 4;                 // Если is_locked = true
  int64 acquired_at_unix_ms = 5;      // Если is_locked = true
  int64 lease_expires_at_unix_ms = 6;   // Если is_locked = true and lease_duration_ms > 0
}
// Сервис SharedWorkingMemoryService дополняется новыми RPC
// ... (в определении service SharedWorkingMemoryService)
// rpc AcquireLock(AcquireLockRequest) returns (AcquireLockResponse);
// rpc ReleaseLock(ReleaseLockRequest) returns (ReleaseLockResponse);
// rpc GetLockInfo(GetLockInfoRequest) returns (LockInfo);

// ----- Сообщения и RPC для распределенных структур данных (начало - счетчик) -----

message DistributedCounterRequest {
  string counter_id = 1; // Уникальный идентификатор счетчика
}

message IncrementCounterRequest {
  string counter_id = 1;
  int64 increment_by = 2; // Значение, на которое увеличить счетчик (может быть отрицательным для уменьшения)
}

message CounterValueResponse {
  string counter_id = 1;
  int64 current_value = 2;
  string status_message = 3; // Для ошибок или информации
}

// ... (в определении service SharedWorkingMemoryService)
// rpc IncrementCounter(IncrementCounterRequest) returns (CounterValueResponse);
// rpc GetCounter(DistributedCounterRequest) returns (CounterValueResponse);
// rpc DeleteCounter(DistributedCounterRequest) returns (SimpleResponse); // SimpleResponse можно определить или использовать google.protobuf.Empty
// Для простоты, пока без DeleteCounter.
