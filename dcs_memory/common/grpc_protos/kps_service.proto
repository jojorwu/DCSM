syntax = "proto3";

package dcsm;

import "kem.proto"; // KEM will be the result of processing and may be part of the response.

option go_package = "github.com/your_org/dcsm_protos/gen/go/kps;kps_service_pb"; // Example Go package option

// Knowledge Processor Service (KPS)
service KnowledgeProcessorService {
  // Processes raw data, generates embeddings (if applicable),
  // forms a KEM, and initiates its storage in GLM.
  rpc ProcessRawData(ProcessRawDataRequest) returns (ProcessRawDataResponse);
}

message ProcessRawDataRequest {
  string data_id = 1; // Optional unique ID for tracking source data or for idempotency.
  string content_type = 2; // MIME type of the content, e.g., "text/plain", "application/pdf", "text/markdown".
  bytes raw_content = 3;    // Raw content of the data.
  map<string, string> initial_metadata = 4; // Initial metadata to associate with the KEM
                                            // (e.g., source URL, filename, user-provided tags).
  // A field could be added for explicit specification of an embedding model if KPS supports multiple.
  // string embedding_model_id = 5;
}

message ProcessRawDataResponse {
  string kem_id = 1;        // ID of the created and stored KEM in GLM.
  bool success = 2;         // Status of the overall operation's success.
  string status_message = 3; // Status message (e.g., "KEM successfully created and stored with ID:xxx" or error description).
  // KEM created_kem = 4;   // Currently not returning the full KEM to avoid data duplication.
                            // The client can request it from GLM by kem_id if needed.
}
