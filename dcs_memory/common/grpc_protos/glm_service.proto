syntax = "proto3";

package dcsm;

import "kem.proto"; // Using relative import as kem.proto is in the same directory
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto"; // For date fields in KEMQuery

service GlobalLongTermMemory {
  // Stores a single KEM. If the ID in KEM is not specified, the server generates it.
  // Returns the complete stored KEM, including ID and timestamps.
  rpc StoreKEM(StoreKEMRequest) returns (StoreKEMResponse);

  // Retrieves KEMs from GLM based on various criteria with pagination.
  rpc RetrieveKEMs(RetrieveKEMsRequest) returns (RetrieveKEMsResponse);

  // Updates an existing KEM. ID must be specified.
  // Returns the updated KEM.
  rpc UpdateKEM(UpdateKEMRequest) returns (KEM);

  // Deletes a KEM from GLM by ID.
  rpc DeleteKEM(DeleteKEMRequest) returns (google.protobuf.Empty);

  // Batch stores KEMs.
  rpc BatchStoreKEMs(BatchStoreKEMsRequest) returns (BatchStoreKEMsResponse);
}

// ----- Messages for StoreKEM -----
message StoreKEMRequest {
  KEM kem = 1; // KEM to be stored. The 'id' field in KEM can be empty.
}

message StoreKEMResponse {
  KEM kem = 1; // The complete stored KEM object, including server-generated ID and timestamps.
}

// ----- Messages for RetrieveKEMs -----
message KEMQuery {
  string text_query = 1; // Text query for semantic search (if supported).
  repeated float embedding_query = 2; // Vector query for semantic search.
  map<string, string> metadata_filters = 3; // Filters by metadata fields (exact key-value match).
  repeated string ids = 4; // List of IDs to retrieve specific KEMs.

  // Date range filters
  google.protobuf.Timestamp created_at_start = 5;
  google.protobuf.Timestamp created_at_end = 6;
  google.protobuf.Timestamp updated_at_start = 7;
  google.protobuf.Timestamp updated_at_end = 8;
  // Other filter types could be added: e.g., for numerical ranges in metadata.
}

message RetrieveKEMsRequest {
  KEMQuery query = 1; // Query for searching KEMs.
  // int32 limit = 2; // Replaced by page_size for clarity with pagination.
  string page_token = 2; // Token to get the next page of results (optional).
  int32 page_size = 3;  // Maximum number of KEMs per page (0 or not specified means server default).
  // google.protobuf.FieldMask field_mask = 4; // Optional: to specify which KEM fields to return (projection).
}

message RetrieveKEMsResponse {
  repeated KEM kems = 1; // List of found KEMs for the current page.
  string next_page_token = 2; // Token to request the next page (empty if this is the last page).
}

// ----- Messages for UpdateKEM -----
// UpdateKEMRequest remains as before: expects kem_id and kem_data_update.
// The server should only update fields explicitly passed in kem_data_update,
// or use a FieldMask if added. For now, assumes updating fields from kem_data_update.
message UpdateKEMRequest {
  string kem_id = 1; // ID of the KEM to update (required).
  KEM kem_data_update = 2; // KEM fields to update. The ID in this object is ignored.
                           // The server must update the updated_at timestamp.
}
// UpdateKEM returns the full updated KEM (as per service definition).

// ----- Messages for DeleteKEM -----
// DeleteKEMRequest remains the same.
message DeleteKEMRequest {
  string kem_id = 1; // ID of the KEM to delete.
}

// ----- Messages for BatchStoreKEMs -----
message BatchStoreKEMsRequest {
  repeated KEM kems = 1; // List of KEMs to store.
}

message BatchStoreKEMsResponse {
  repeated KEM successfully_stored_kems = 1; // KEMs that were successfully stored (with server-side IDs/timestamps).
  // List of IDs or indices of KEMs from the request that failed to store.
  // If an ID was server-generated, the index is the only way to reference it.
  // For simplicity, could return a general error message if anything went wrong.
  // Alternatively, if KEMs in the request must have IDs (even client-side), can return failed_kem_ids.
  repeated string failed_kem_references = 2; // Can be an ID (if provided in request) or an index like "req_idx_0", "req_idx_1".
  string overall_error_message = 3; // General error message if the batch operation had issues.
}
