# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import glm_service_pb2 as glm__service__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import kem_pb2 as kem__pb2

GRPC_GENERATED_VERSION = '1.73.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in glm_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class GlobalLongTermMemoryStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StoreKEM = channel.unary_unary(
                '/dcsm.GlobalLongTermMemory/StoreKEM',
                request_serializer=glm__service__pb2.StoreKEMRequest.SerializeToString,
                response_deserializer=glm__service__pb2.StoreKEMResponse.FromString,
                _registered_method=True)
        self.RetrieveKEMs = channel.unary_unary(
                '/dcsm.GlobalLongTermMemory/RetrieveKEMs',
                request_serializer=glm__service__pb2.RetrieveKEMsRequest.SerializeToString,
                response_deserializer=glm__service__pb2.RetrieveKEMsResponse.FromString,
                _registered_method=True)
        self.UpdateKEM = channel.unary_unary(
                '/dcsm.GlobalLongTermMemory/UpdateKEM',
                request_serializer=glm__service__pb2.UpdateKEMRequest.SerializeToString,
                response_deserializer=kem__pb2.KEM.FromString,
                _registered_method=True)
        self.DeleteKEM = channel.unary_unary(
                '/dcsm.GlobalLongTermMemory/DeleteKEM',
                request_serializer=glm__service__pb2.DeleteKEMRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.BatchStoreKEMs = channel.unary_unary(
                '/dcsm.GlobalLongTermMemory/BatchStoreKEMs',
                request_serializer=glm__service__pb2.BatchStoreKEMsRequest.SerializeToString,
                response_deserializer=glm__service__pb2.BatchStoreKEMsResponse.FromString,
                _registered_method=True)


class GlobalLongTermMemoryServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StoreKEM(self, request, context):
        """Сохраняет одну КЕП. Если ID в КЕП не указан, сервер его генерирует.
        Возвращает полную сохраненную КЕП, включая ID и временные метки.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetrieveKEMs(self, request, context):
        """Извлекает КЕП из GLM на основе различных критериев с пагинацией.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateKEM(self, request, context):
        """Обновляет существующую КЕП. ID должен быть указан.
        Возвращает обновленную КЕП.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteKEM(self, request, context):
        """Удаляет КЕП из GLM по ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchStoreKEMs(self, request, context):
        """Пакетное сохранение КЕП
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GlobalLongTermMemoryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StoreKEM': grpc.unary_unary_rpc_method_handler(
                    servicer.StoreKEM,
                    request_deserializer=glm__service__pb2.StoreKEMRequest.FromString,
                    response_serializer=glm__service__pb2.StoreKEMResponse.SerializeToString,
            ),
            'RetrieveKEMs': grpc.unary_unary_rpc_method_handler(
                    servicer.RetrieveKEMs,
                    request_deserializer=glm__service__pb2.RetrieveKEMsRequest.FromString,
                    response_serializer=glm__service__pb2.RetrieveKEMsResponse.SerializeToString,
            ),
            'UpdateKEM': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateKEM,
                    request_deserializer=glm__service__pb2.UpdateKEMRequest.FromString,
                    response_serializer=kem__pb2.KEM.SerializeToString,
            ),
            'DeleteKEM': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteKEM,
                    request_deserializer=glm__service__pb2.DeleteKEMRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'BatchStoreKEMs': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchStoreKEMs,
                    request_deserializer=glm__service__pb2.BatchStoreKEMsRequest.FromString,
                    response_serializer=glm__service__pb2.BatchStoreKEMsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dcsm.GlobalLongTermMemory', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('dcsm.GlobalLongTermMemory', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GlobalLongTermMemory(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StoreKEM(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dcsm.GlobalLongTermMemory/StoreKEM',
            glm__service__pb2.StoreKEMRequest.SerializeToString,
            glm__service__pb2.StoreKEMResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RetrieveKEMs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dcsm.GlobalLongTermMemory/RetrieveKEMs',
            glm__service__pb2.RetrieveKEMsRequest.SerializeToString,
            glm__service__pb2.RetrieveKEMsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateKEM(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dcsm.GlobalLongTermMemory/UpdateKEM',
            glm__service__pb2.UpdateKEMRequest.SerializeToString,
            kem__pb2.KEM.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteKEM(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dcsm.GlobalLongTermMemory/DeleteKEM',
            glm__service__pb2.DeleteKEMRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BatchStoreKEMs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dcsm.GlobalLongTermMemory/BatchStoreKEMs',
            glm__service__pb2.BatchStoreKEMsRequest.SerializeToString,
            glm__service__pb2.BatchStoreKEMsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
