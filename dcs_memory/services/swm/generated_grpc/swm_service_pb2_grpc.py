# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import swm_service_pb2 as swm__service__pb2

GRPC_GENERATED_VERSION = '1.73.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in swm_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SharedWorkingMemoryServiceStub(object):
    """Сервис Общей Рабочей Памяти (Shared Working Memory Service)
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PublishKEMToSWM = channel.unary_unary(
                '/dcsm.SharedWorkingMemoryService/PublishKEMToSWM',
                request_serializer=swm__service__pb2.PublishKEMToSWMRequest.SerializeToString,
                response_deserializer=swm__service__pb2.PublishKEMToSWMResponse.FromString,
                _registered_method=True)
        self.SubscribeToSWMEvents = channel.unary_stream(
                '/dcsm.SharedWorkingMemoryService/SubscribeToSWMEvents',
                request_serializer=swm__service__pb2.SubscribeToSWMEventsRequest.SerializeToString,
                response_deserializer=swm__service__pb2.SWMMemoryEvent.FromString,
                _registered_method=True)
        self.QuerySWM = channel.unary_unary(
                '/dcsm.SharedWorkingMemoryService/QuerySWM',
                request_serializer=swm__service__pb2.QuerySWMRequest.SerializeToString,
                response_deserializer=swm__service__pb2.QuerySWMResponse.FromString,
                _registered_method=True)
        self.LoadKEMsFromGLM = channel.unary_unary(
                '/dcsm.SharedWorkingMemoryService/LoadKEMsFromGLM',
                request_serializer=swm__service__pb2.LoadKEMsFromGLMRequest.SerializeToString,
                response_deserializer=swm__service__pb2.LoadKEMsFromGLMResponse.FromString,
                _registered_method=True)


class SharedWorkingMemoryServiceServicer(object):
    """Сервис Общей Рабочей Памяти (Shared Working Memory Service)
    """

    def PublishKEMToSWM(self, request, context):
        """Публикует КЕП в SWM. Может также инициировать сохранение/обновление в GLM.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeToSWMEvents(self, request, context):
        """Подписывается на события, происходящие в SWM (например, появление новых КЕП).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QuerySWM(self, request, context):
        """Запрашивает активные КЕП непосредственно из SWM (из ее кэша).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadKEMsFromGLM(self, request, context):
        """Запрашивает загрузку КЕП из GLM в SWM (в кэш SWM).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SharedWorkingMemoryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PublishKEMToSWM': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishKEMToSWM,
                    request_deserializer=swm__service__pb2.PublishKEMToSWMRequest.FromString,
                    response_serializer=swm__service__pb2.PublishKEMToSWMResponse.SerializeToString,
            ),
            'SubscribeToSWMEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeToSWMEvents,
                    request_deserializer=swm__service__pb2.SubscribeToSWMEventsRequest.FromString,
                    response_serializer=swm__service__pb2.SWMMemoryEvent.SerializeToString,
            ),
            'QuerySWM': grpc.unary_unary_rpc_method_handler(
                    servicer.QuerySWM,
                    request_deserializer=swm__service__pb2.QuerySWMRequest.FromString,
                    response_serializer=swm__service__pb2.QuerySWMResponse.SerializeToString,
            ),
            'LoadKEMsFromGLM': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadKEMsFromGLM,
                    request_deserializer=swm__service__pb2.LoadKEMsFromGLMRequest.FromString,
                    response_serializer=swm__service__pb2.LoadKEMsFromGLMResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dcsm.SharedWorkingMemoryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('dcsm.SharedWorkingMemoryService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SharedWorkingMemoryService(object):
    """Сервис Общей Рабочей Памяти (Shared Working Memory Service)
    """

    @staticmethod
    def PublishKEMToSWM(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dcsm.SharedWorkingMemoryService/PublishKEMToSWM',
            swm__service__pb2.PublishKEMToSWMRequest.SerializeToString,
            swm__service__pb2.PublishKEMToSWMResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeToSWMEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/dcsm.SharedWorkingMemoryService/SubscribeToSWMEvents',
            swm__service__pb2.SubscribeToSWMEventsRequest.SerializeToString,
            swm__service__pb2.SWMMemoryEvent.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QuerySWM(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dcsm.SharedWorkingMemoryService/QuerySWM',
            swm__service__pb2.QuerySWMRequest.SerializeToString,
            swm__service__pb2.QuerySWMResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LoadKEMsFromGLM(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dcsm.SharedWorkingMemoryService/LoadKEMsFromGLM',
            swm__service__pb2.LoadKEMsFromGLMRequest.SerializeToString,
            swm__service__pb2.LoadKEMsFromGLMResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
