syntax = "proto3";

package dcsm;

import "protos/kem.proto";
import "google/protobuf/empty.proto";

// Сервис для Общей Рабочей Памяти / Шины Памяти (Shared Working Memory / Memory Bus Service)
service SharedWorkingMemory {
  // Публикует КЕП в SWM, делая ее доступной для других агентов.
  // Может также инициировать асинхронное сохранение в GLM, если КЕП новая или значительно обновлена.
  rpc PublishKEM(PublishKEMRequest) returns (PublishKEMResponse);

  // Подписывается на поток КЕП, соответствующих определенным критериям (например, тема, запрос).
  // Сервер будет стримить КЕП по мере их появления или обновления в SWM.
  rpc SubscribeKEMs(SubscribeKEMsRequest) returns (stream KEM);

  // Запрашивает активные КЕП из SWM на основе различных критериев.
  // Это запрос "одного момента времени" к текущему состоянию SWM.
  rpc QueryActiveKEMs(QueryActiveKEMsRequest) returns (QueryActiveKEMsResponse);

  // Запрашивает "подтягивание" КЕП из GLM в SWM, если они там еще не активны.
  // Может использоваться агентом, если он ожидает, что определенные КЕП скоро понадобятся.
  rpc RequestKEMLoadToSWM(RequestKEMLoadToSWMRequest) returns (RequestKEMLoadToSWMResponse);
}

// ----- Сообщения для PublishKEM -----
message PublishKEMRequest {
  KEM kem = 1; // КЕП для публикации
  // Можно добавить флаги, например, persist_to_glm = true/false
}

message PublishKEMResponse {
  string kem_id = 1; // ID опубликованной КЕП
  bool accepted = 2; // Принята ли КЕП шиной SWM
  string message = 3; // Дополнительное сообщение (например, "KEM queued for GLM persistence")
}

// ----- Сообщения для SubscribeKEMs -----
message SubscriptionTopic {
  enum TopicType {
    UNDEFINED = 0;
    METADATA_KEY_VALUE = 1; // Подписка на КЕП с определенными метаданными (например, "topic":"project_alpha")
    SEMANTIC_QUERY = 2;     // Подписка на КЕП, семантически близкие к запросу
  }
  TopicType type = 1;
  string value = 2; // Значение для темы (например, "project_alpha" или текстовый запрос для семантического поиска)
  map<string, string> metadata_filters = 3; // Дополнительные фильтры по метаданным
}

message SubscribeKEMsRequest {
  repeated SubscriptionTopic topics = 1; // Список тем/запросов для подписки
  // Можно добавить параметры, например, replay_past_kems = true/false
}
// Ответ для SubscribeKEMs - это поток KEM (stream KEM)

// ----- Сообщения для QueryActiveKEMs -----
// Используем KEMQuery из glm_service.proto, если он подходит, или определяем новый.
// Для простоты предположим, что KEMQuery из GLM подходит и для SWM,
// но SWM может иметь свои оптимизации и не поддерживать все типы запросов GLM.
// Если нужно импортировать, то: import "protos/glm_service.proto";
// и использовать dcsm.KEMQuery. На данном этапе оставим его более общим.

message ActiveKEMQuery {
  string text_query = 1;
  repeated float embedding_query = 2;
  map<string, string> metadata_filters = 3;
}

message QueryActiveKEMsRequest {
  ActiveKEMQuery query = 1;
  int32 limit = 2;
}

message QueryActiveKEMsResponse {
  repeated KEM kems = 1;
}

// ----- Сообщения для RequestKEMLoadToSWM -----
message RequestKEMLoadToSWMRequest {
  // Запрос может быть по ID КЕП или по более общему запросу, как в GLM
  repeated string kem_ids = 1; // Список ID КЕП для загрузки из GLM
  ActiveKEMQuery query_if_ids_empty = 2; // Запрос, если kem_ids пуст, для поиска в GLM
  int32 limit_for_query = 3; // Лимит для query_if_ids_empty
}

message RequestKEMLoadToSWMResponse {
  int32 requested_to_load_count = 1; // Сколько КЕП было запрошено к загрузке
  int32 already_active_count = 2;    // Сколько из запрошенных уже были активны
  string message = 3; // Дополнительная информация (например, "Load request queued")
}
