version: '3.8'

services:
  qdrant:
    image: qdrant/qdrant:latest # It is recommended to specify a specific version
    container_name: dcsm_qdrant
    ports:
      - "6333:6333" # gRPC порт Qdrant
      - "6334:6334" # HTTP REST порт Qdrant (для UI, если он есть)
    volumes:
      - ./qdrant_storage:/qdrant/storage # Персистентное хранилище данных Qdrant
    networks:
      - dcsm_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6334/healthz"] # Проверка через REST API
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s # Дать время Qdrant на запуск перед первой проверкой

  glm:
    build:
      context: ./dcs_memory/services/glm
      dockerfile: Dockerfile
    container_name: dcsm_glm
    ports:
      - "50051:50051" # gRPC порт GLM
    environment:
      DCSM_CONFIG_FILE: /app/config.yml
      # DEFAULT_VECTOR_SIZE: "384" # Теперь будет управляться через config.yml или переменными с префиксом GLM_
      # Другие переменные GLM_* также будут управляться через config.yml или env vars с префиксом
    volumes:
      - ./config.yml:/app/config.yml:ro # Монтируем config.yml в read-only режиме
      - ./certs:/certs:ro # Mount certificates
    depends_on:
      qdrant:
        condition: service_healthy # Ждать, пока Qdrant не станет healthy
    networks:
      - dcsm_network
    # volumes: # Если нужно монтировать код для разработки
    #   - ./dcs_memory/services/glm:/service
    #   - ./config.yml:/app/config.yml:ro # Уже добавлено выше

  kps:
    build:
      context: ./dcs_memory/services/kps
      dockerfile: Dockerfile
    container_name: dcsm_kps
    ports:
      - "50052:50052" # gRPC порт KPS
    environment:
      DCSM_CONFIG_FILE: /app/config.yml
      # SENTENCE_TRANSFORMER_MODEL: "all-MiniLM-L6-v2" # Теперь будет управляться через config.yml или KPS_SENTENCE_TRANSFORMER_MODEL
      # DEFAULT_VECTOR_SIZE: "384" # Управляется через config.yml или KPS_DEFAULT_VECTOR_SIZE
    volumes:
      - ./config.yml:/app/config.yml:ro
      - ./certs:/certs:ro # Mount certificates
    depends_on:
      glm:
        condition: service_started # Или healthcheck, если будет добавлен в GLM
    networks:
      - dcsm_network
    # volumes:
    #   - ./dcs_memory/services/kps:/service
      # - kps_model_cache:/root/.cache # Пример монтирования кэша моделей
    #   - ./config.yml:/app/config.yml:ro # Уже добавлено выше

  swm:
    build:
      context: ./dcs_memory/services/swm
      dockerfile: Dockerfile
    container_name: dcsm_swm
    ports:
      - "50053:50053" # gRPC порт SWM
    environment:
      DCSM_CONFIG_FILE: /app/config.yml
      # SWM_INDEXED_METADATA_KEYS: "type,source" # Управляется через config.yml или SWM_SWM_INDEXED_METADATA_KEYS
    volumes:
      - ./config.yml:/app/config.yml:ro
      - ./certs:/certs:ro # Mount certificates
    depends_on:
      glm:
        condition: service_started # Или healthcheck, если будет добавлен в GLM
    networks:
      - dcsm_network
    # volumes:
    #   - ./dcs_memory/services/swm:/service
    #   - ./config.yml:/app/config.yml:ro # Уже добавлено выше

networks:
  dcsm_network:
    driver: bridge

# volumes: # Если используется volume для кэша моделей KPS
#   kps_model_cache:
#     driver: local
